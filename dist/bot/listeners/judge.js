"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Judge = void 0;
const discord_js_1 = require("discord.js");
const constants_1 = require("../../constants");
const utils_1 = require("../utils");
var Judge;
(function (Judge) {
    function initialize(bot, botID) {
        bot.on('messageReactionAdd', (vote, user) => manipulate(vote, user, botID));
        setInterval(() => sweepKnownUsers(bot), constants_1.MESSAGE_SWEEP_INTERVAL);
    }
    Judge.initialize = initialize;
    function manipulate(vote, user, botID) {
        parse(vote, user, botID)
            .then(ejectVotes => Promise.all(ejectVotes.map(({ users }) => users.remove(user.id))).catch(() => undefined))
            .catch(console.error);
    }
    async function parse(vote, user, botID) {
        if (user.bot)
            return [];
        const poll = await utils_1.Utils.fetchMessage(vote.message);
        if (!poll)
            return [];
        const embed = poll.embeds[0];
        if (poll.author.id !== botID || !embed) {
            utils_1.Utils.removeMessageCache(poll);
            return [];
        }
        user = await user.fetch();
        if (embed.color === constants_1.COLORS.POLL)
            return parsePoll(poll, vote);
        if (embed.color === constants_1.COLORS.EXPOLL)
            return parseExpoll(poll, vote, user);
        if (embed.color === constants_1.COLORS.ENDED)
            return [vote];
        utils_1.Utils.removeMessageCache(poll);
        return [];
    }
    function parsePoll(poll, vote) {
        const myReactions = poll.reactions.cache.filter(({ me }) => me);
        if (!myReactions.size)
            return [];
        const emoji = vote.emoji;
        return myReactions.has(emoji.id ?? emoji.name ?? '') ? [] : [vote];
    }
    function parseExpoll(poll, vote, user) {
        const ejectVotes = parsePoll(poll, vote);
        const known = isKnownUser(poll.channel, poll, user);
        if (ejectVotes.length && known)
            return ejectVotes;
        poll.reactions.cache.get(vote.emoji.id ?? vote.emoji.name ?? '')?.users.cache.set(user.id, user);
        ejectVotes.push(...poll.reactions.cache.filter(({ users, emoji }) => (!known || users.cache.has(user.id)) && !(emoji.name && emoji.name === vote.emoji.name
            && emoji.id === vote.emoji.id)).values());
        rememberUser(poll.channel, poll, user);
        return ejectVotes;
    }
    const knownUserIDs = new Map;
    function rememberUser(channel, message, user) {
        const messageIDs = knownUserIDs.get(channel.id);
        const userIDs = messageIDs?.get(message.id);
        if (userIDs)
            userIDs.add(user.id);
        else {
            if (messageIDs)
                messageIDs.set(message.id, new Set(user.id));
            else
                knownUserIDs.set(channel.id, new discord_js_1.Collection([[message.id, new Set(user.id)]]));
        }
    }
    function isKnownUser(channel, message, user) {
        const userIDs = knownUserIDs.get(channel.id)?.get(message.id);
        return !!userIDs && userIDs.has(user.id);
    }
    function sweepKnownUsers(bot) {
        const channels = bot.channels.cache;
        knownUserIDs.forEach((messageIDs, channelID) => {
            const channel = channels.get(channelID);
            if (!(channel instanceof discord_js_1.TextChannel || channel instanceof discord_js_1.NewsChannel))
                return;
            messageIDs.sweep((_, id) => !channel.messages.cache.has(id));
        });
    }
})(Judge = exports.Judge || (exports.Judge = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianVkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYm90L2xpc3RlbmVycy9qdWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FZb0I7QUFDcEIsK0NBQWlFO0FBQ2pFLG9DQUFpQztBQUVqQyxJQUFpQixLQUFLLENBc0hyQjtBQXRIRCxXQUFpQixLQUFLO0lBQ3BCLFNBQWdCLFVBQVUsQ0FBQyxHQUFXLEVBQUUsS0FBZ0I7UUFDdEQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxrQ0FBc0IsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFIZSxnQkFBVSxhQUd6QixDQUFBO0lBRUQsU0FBUyxVQUFVLENBQ2pCLElBQThDLEVBQUUsSUFBd0IsRUFBRSxLQUFnQjtRQUUxRixLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7YUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3JELENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUN6QjthQUNBLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssVUFBVSxLQUFLLENBQ2xCLElBQThDLEVBQUUsSUFBd0IsRUFBRSxLQUFnQjtRQUUxRixJQUFJLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFeEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxhQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sRUFBRSxDQUFDO1FBRXJCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDdEMsYUFBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFMUIsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLGtCQUFNLENBQUMsSUFBSTtZQUFJLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssa0JBQU0sQ0FBQyxNQUFNO1lBQUUsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssa0JBQU0sQ0FBQyxLQUFLO1lBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpELGFBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxTQUFTLFNBQVMsQ0FDaEIsSUFBYSxFQUFFLElBQThDO1FBRTdELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTtZQUFFLE9BQU8sRUFBRSxDQUFDO1FBRWpDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FDbEIsSUFBYSxFQUFFLElBQThDLEVBQUUsSUFBVTtRQUV6RSxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksS0FBSztZQUFFLE9BQU8sVUFBVSxDQUFDO1FBRWxELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWpHLFVBQVUsQ0FBQyxJQUFJLENBQ2IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQ2xELENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN2QyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO2VBQ3pDLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzlCLENBQ0YsQ0FBQyxNQUFNLEVBQUUsQ0FDWCxDQUFDO1FBRUYsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXZDLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFLRCxNQUFNLFlBQVksR0FFZCxJQUFJLEdBQUcsQ0FBQztJQUVaLFNBQVMsWUFBWSxDQUNuQixPQUEwQixFQUFFLE9BQWdCLEVBQUUsSUFBd0I7UUFFdEUsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsVUFBVSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSSxPQUFPO1lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDbEI7WUFDSCxJQUFJLFVBQVU7Z0JBQ1osVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztnQkFFN0MsWUFBWSxDQUFDLEdBQUcsQ0FDZCxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksdUJBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzdELENBQUM7U0FDTDtJQUNILENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FDbEIsT0FBMEIsRUFBRSxPQUFnQixFQUFFLElBQXdCO1FBRXRFLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUQsT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFXO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBRXBDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDN0MsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksd0JBQVcsSUFBSSxPQUFPLFlBQVksd0JBQVcsQ0FBQztnQkFDckUsT0FBTztZQUVULFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUMsRUF0SGdCLEtBQUssR0FBTCxhQUFLLEtBQUwsYUFBSyxRQXNIckIifQ==