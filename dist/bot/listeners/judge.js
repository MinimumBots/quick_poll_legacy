"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Judge = void 0;
const discord_js_1 = require("discord.js");
const constants_1 = require("../../constants");
const utils_1 = require("../utils");
var Judge;
(function (Judge) {
    function initialize(bot) {
        bot.on('messageReactionAdd', (vote, user) => manipulate(vote, user, bot.user.id));
        setInterval(() => sweepKnownUsers(bot), constants_1.MESSAGE_SWEEP_INTERVAL);
    }
    Judge.initialize = initialize;
    function manipulate(vote, user, botID) {
        parse(vote, user, botID)
            .then(ejectVotes => Promise.all(ejectVotes.map(({ users }) => users.remove(user.id))).catch(() => undefined))
            .catch(console.error);
    }
    async function parse(vote, user, botID) {
        if (user.bot)
            return [];
        const poll = await utils_1.Utils.fetchMessage(vote.message);
        if (!poll)
            return [];
        const embed = poll.embeds[0];
        if (poll.author.id !== botID || !embed) {
            utils_1.Utils.removeMessageCache(poll);
            return [];
        }
        user = await user.fetch();
        if (embed.color === constants_1.COLORS.POLL)
            return parsePoll(poll, vote);
        if (embed.color === constants_1.COLORS.EXPOLL)
            return parseExpoll(poll, vote, user);
        if (embed.color === constants_1.COLORS.ENDED)
            return [vote];
        utils_1.Utils.removeMessageCache(poll);
        return [];
    }
    function parsePoll(poll, vote) {
        const myReactions = poll.reactions.cache.filter(({ me }) => me);
        if (!myReactions.size)
            return [];
        const emoji = vote.emoji;
        return myReactions.has(emoji.id ?? emoji.name ?? '') ? [] : [vote];
    }
    function parseExpoll(poll, vote, user) {
        const ejectVotes = parsePoll(poll, vote);
        const known = isKnownUser(poll.channel, poll, user);
        if (ejectVotes.length && known)
            return ejectVotes;
        poll.reactions.cache.get(vote.emoji.id ?? vote.emoji.name ?? '')?.users.cache.set(user.id, user);
        ejectVotes.push(...poll.reactions.cache.filter(({ users, emoji }) => (!known || users.cache.has(user.id)) && !(emoji.name && emoji.name === vote.emoji.name
            && emoji.id === vote.emoji.id)).values());
        rememberUser(poll.channel, poll, user);
        return ejectVotes;
    }
    const knownUserIDs = new Map;
    function rememberUser(channel, message, user) {
        const messageIDs = knownUserIDs.get(channel.id);
        const userIDs = messageIDs?.get(message.id);
        if (userIDs)
            userIDs.add(user.id);
        else {
            if (messageIDs)
                messageIDs.set(message.id, new Set(user.id));
            else
                knownUserIDs.set(channel.id, new discord_js_1.Collection([[message.id, new Set(user.id)]]));
        }
    }
    function isKnownUser(channel, message, user) {
        const userIDs = knownUserIDs.get(channel.id)?.get(message.id);
        return !!userIDs && userIDs.has(user.id);
    }
    function sweepKnownUsers(bot) {
        const channels = bot.channels.cache;
        knownUserIDs.forEach((messageIDs, channelID) => {
            const channel = channels.get(channelID);
            if (!(channel instanceof discord_js_1.TextChannel || channel instanceof discord_js_1.NewsChannel))
                return;
            messageIDs.sweep((_, id) => !channel.messages.cache.has(id));
        });
    }
})(Judge = exports.Judge || (exports.Judge = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianVkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYm90L2xpc3RlbmVycy9qdWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FZb0I7QUFDcEIsK0NBQWlFO0FBQ2pFLG9DQUFpQztBQUVqQyxJQUFpQixLQUFLLENBc0hyQjtBQXRIRCxXQUFpQixLQUFLO0lBQ3BCLFNBQWdCLFVBQVUsQ0FBQyxHQUFpQjtRQUMxQyxHQUFHLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsa0NBQXNCLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBSGUsZ0JBQVUsYUFHekIsQ0FBQTtJQUVELFNBQVMsVUFBVSxDQUNqQixJQUE4QyxFQUFFLElBQXdCLEVBQUUsS0FBZ0I7UUFFMUYsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO2FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUNqQixPQUFPLENBQUMsR0FBRyxDQUNULFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyRCxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDekI7YUFDQSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLLFVBQVUsS0FBSyxDQUNsQixJQUE4QyxFQUFFLElBQXdCLEVBQUUsS0FBZ0I7UUFFMUYsSUFBSSxJ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