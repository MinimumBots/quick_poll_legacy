"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Judge = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../utils");
var Judge;
(function (Judge) {
    function initialize(bot, botID) {
        bot.on('messageReactionAdd', (vote, user) => manipulate(vote, user, botID));
    }
    Judge.initialize = initialize;
    function manipulate(vote, user, botID) {
        parse(vote, user, botID)
            .then(ejectVotes => Promise.all(ejectVotes.map(({ users }) => users.remove(user.id))).catch(() => undefined))
            .catch(console.error);
    }
    async function parse(vote, user, botID) {
        if (user.id === botID)
            return [];
        const poll = await utils_1.Utils.fetchMessage(vote.message);
        if (!poll)
            return [];
        const embed = poll.embeds[0];
        if (poll.author.id !== botID || !embed) {
            utils_1.Utils.removeMessageCache(poll);
            return [];
        }
        if (embed.color === constants_1.COLORS.POLL)
            return parsePoll(poll, vote);
        if (embed.color === constants_1.COLORS.EXPOLL)
            return parseExpoll(poll, vote, user);
        if (embed.color === constants_1.COLORS.ENDED)
            return [vote];
        utils_1.Utils.removeMessageCache(poll);
        return [];
    }
    function parsePoll(poll, vote) {
        const myReactions = poll.reactions.cache.filter(({ me }) => me);
        if (!myReactions.size)
            return [];
        const emoji = vote.emoji;
        return myReactions.has(emoji.id ?? emoji.name) ? [] : [vote];
    }
    function parseExpoll(poll, vote, user) {
        const ejectVotes = parsePoll(poll, vote);
        if (ejectVotes.length && !vote.partial)
            return ejectVotes;
        poll.reactions.cache.get(vote.emoji.id ?? vote.emoji.name)?.users.add(user);
        return ejectVotes.concat(poll.reactions.cache.filter(({ users, emoji }) => (vote.partial || users.cache.has(user.id)) && !(emoji.name && emoji.name === vote.emoji.name
            && emoji.id === vote.emoji.id)).array());
    }
})(Judge = exports.Judge || (exports.Judge = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianVkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYm90L2xpc3RlbmVycy9qdWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSwrQ0FBeUM7QUFDekMsb0NBQWlDO0FBRWpDLElBQWlCLEtBQUssQ0FnRXJCO0FBaEVELFdBQWlCLEtBQUs7SUFDcEIsU0FBZ0IsVUFBVSxDQUFDLEdBQVcsRUFBRSxLQUFnQjtRQUN0RCxHQUFHLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRmUsZ0JBQVUsYUFFekIsQ0FBQTtJQUVELFNBQVMsVUFBVSxDQUNqQixJQUFxQixFQUFFLElBQXdCLEVBQUUsS0FBZ0I7UUFFakUsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO2FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUNqQixPQUFPLENBQUMsR0FBRyxDQUNULFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyRCxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDekI7YUFDQSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxLQUFLLFVBQVUsS0FBSyxDQUNsQixJQUFxQixFQUFFLElBQXdCLEVBQUUsS0FBZ0I7UUFFakUsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVqQyxNQUFNLElBQUksR0FBRyxNQUFNLGFBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxD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