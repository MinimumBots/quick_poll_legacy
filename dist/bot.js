"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const constants_1 = require("./constants");
const bot = new discord_js_1.Client({
    ws: { intents: constants_1.BotIntents },
    partials: ['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION'],
    restTimeOffset: 100,
    retryLimit: 3,
    messageCacheMaxSize: 500,
});
const fetchGuildCount = async () => {
    const counts = await bot.shard?.fetchClientValues('guilds.cache.size');
    const count = counts?.reduce((a, b) => a + b, 0);
    return typeof count === 'number' && count > 0 ? count : 0;
};
let presenceCounter = 0;
const updatePresence = async () => {
    let type = 'PLAYING';
    let name = '/poll | ex/poll';
    switch (presenceCounter % 2) {
        case 1:
            type = 'WATCHING';
            name = `${await fetchGuildCount()} サーバー`;
            break;
    }
    await bot.user?.setPresence({
        status: 'online',
        activity: { type: type, name: name }
    });
    presenceCounter++;
};
bot.on('ready', () => {
    bot.setInterval(() => updatePresence()
        .catch(console.error), constants_1.PresenceUpdateInterval);
});
bot.login(process.env['QUICK_POLL_TOKEN'])
    .catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFrRDtBQUNsRCwyQ0FBaUU7QUFFakUsTUFBTSxHQUFHLEdBQUcsSUFBSSxtQkFBTSxDQUFDO0lBQ3JCLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxzQkFBVSxFQUFFO0lBQzNCLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUM7SUFDcEUsY0FBYyxFQUFFLEdBQUc7SUFDbkIsVUFBVSxFQUFFLENBQUM7SUFDYixtQkFBbUIsRUFBRSxHQUFHO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sZUFBZSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVELENBQUMsQ0FBQTtBQUVELElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQztBQUN4QixNQUFNLGNBQWMsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNoQyxJQUFJLElBQUksR0FBaUIsU0FBUyxDQUFDO0lBQ25DLElBQUksSUFBSSxHQUFHLGlCQUFpQixDQUFDO0lBRTdCLFFBQVEsZUFBZSxHQUFHLENBQUMsRUFBRTtRQUMzQixLQUFLLENBQUM7WUFDSixJQUFJLEdBQUcsVUFBVSxDQUFDO1lBQ2xCLElBQUksR0FBRyxHQUFHLE1BQU0sZUFBZSxFQUFFLE9BQU8sQ0FBQztZQUN6QyxNQUFNO0tBQ1Q7SUFFRCxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDO1FBQzFCLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtLQUNyQyxDQUFDLENBQUM7SUFFSCxlQUFlLEVBQUUsQ0FBQztBQUNwQixDQUFDLENBQUE7QUFFRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7SUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FDYixHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUU7U0FDbkIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDdkIsa0NBQXNCLENBQ3ZCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3ZDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMifQ==